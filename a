main() <int main (argc, argv) at uni_table_gen.c:3920>:
    uni_table_init() <void uni_table_init () at in_code_table.c:2177>:
        calloc()
        skferr()
    initialize_error()
    calloc()
    skferr()
    strnlen()
    getuid()
    getenv()
    argeval() <int argeval (pargc, pargv, limit) at skf.c:1463>:
        fprintf()
        error_extend_option()
        is_digit()
        skf_codeset_parser() <void skf_codeset_parser (parse) at in_code_table.c:2568>:
            error_code_option()
            skferr()
            fprintf()
            ValidValueDisplay()
            is_multibyte() <if (is_multibyte (dyn_out_codeset[i]char_width)) at dyn_table.c:58226>
        skf_kanaconv_parser() <int skf_kanaconv_parser (cp) at skf.c:2473>:
        display_version()
        skf_terminate()
        skf_option_parser() <int skf_option_parser (cq, opt_t) at skf.c:2380>
        strchr()
        display_help()
        test_support_charset()
        test_support_codeset()
        display_nkf_help()
        strncpy()
        skf_search_cname() <int skf_search_cname (cq) at in_code_table.c:2256>:
            cname_comp() <int cname_comp (sh, sb) at in_decoder.c:673>:
                SKFtolower()
                is_cname_char()
        is_hex_char()
        skf_hex()
        skf_search_chname() <int skf_search_chname (cq) at in_code_table.c:2275>:
            cname_comp() <int cname_comp (sh, sb) at in_decoder.c:673>:
                SKFtolower()
                is_cname_char()
        skf_kanaconv_parser() <int skf_kanaconv_parser (cp) at skf.c:2473>:
    geteuid()
    get_output_locale()
    out_undefined()
    skf_charset_parser()
    skf_output_table_set() <void skf_output_table_set () at out_code_table.c:2442>:
        output_codeset_fix_table()
        is_ucs_ufam()
    is_ucs_ufam()
    set_put_hk_enbl()
    is_ucs_utf16() <if (is_ucs_utf16 (conv_cap)) at ucodoconv.c:603>
    oconv_init() <int oconv_init () at oconv.c:269>:
        test_out_char()
        is_ucs_ufam()
        out_bg()
        is_euc_51932()
        mime_limit_set() <void mime_limit_set () at out_encoder.c:130>:
            is_o_encode_mimeb()
            skf_strlen() <size_t skf_strlen (str, maxlen) at skf_fileio.c:301>
            is_o_encode_mimeq()
            is_o_encode_q() <else if (is_o_encode_q (encode)) at out_encoder.c:484>
            is_o_encode_b64() <else if (is_o_encode_b64 (encode)) at out_encoder.c:482>
            is_gb18030() <if (is_gb18030 (conv_cap)) at msoconv.c:695>
            is_ucs_utf8() <else if (is_ucs_utf8 (conv_cap)) at ucodoconv.c:609>
            is_jis()
            is_euc()
            fprintf()
        is_ucs_utf7() <else if (is_ucs_utf7 (conv_cap)) at ucodoconv.c:618>
        is_ucs_brgt()
        is_ucs_uri()
        is_ucs_transp()
        is_hzzW()
        is_vni() <if (is_vni (ec)) at in_converter.c:1498>
        is_viqr_or_vimn()
        is_keis()
        out_undefined()
        is_o_encode_hex()
        is_o_encode_oct()
        is_o_encode_b64() <else if (is_o_encode_b64 (encode)) at out_encoder.c:482>
        is_o_encode_uri()
        load_external_table() <int load_external_table (tbl_entry) at in_code_table.c:2650>:
            is_tblundef()
            in_tablefault()
            is_tblshort()
            is_tbllong()
            calloc()
            skferr()
            strlen()
            fprintf()
            snprintf() <if ((snprintf (table_name, (size_t) (SKF_TABLE_PATH -2),, if ((snprintf (table_name, (size_t) (SKF_TABLE_PATH -2),, skf_ext_table, (iso), (((ch >=) && (ch <=)) (set) (set)), SKFtoupper (ch), id)) < 0) skferr (SKF_TBLALLOCERR, (long) ch, 0) if (is_vv_debug) fprintf (stderr,, table_name, siz + siz +12) if ((table fopen (table_name, skf_inmode)) == NULL) in_tablefault (SKF_TBLBROKN, table_name) free (table_name) return (NULL) else i 0 magic skf_table_magic while (*magic !=) if (*magic ++ != getc (table)) if (disp_warn) in_tablefault (SKF_TBLINCNSIS, table_name) fail 1 break if ((utable calloc ((size_t) siz, sizeof (unsigned short))) == NULL) skferr (SKF_TBLALLOCERR, (long) siz, 0) if (fail == 0) for (i 0 i < siz i ++) if (((j getc (table)) == EOF) || ((k getc (table)) == EOF)) in_tablefault (SKF_TBLSHORT, table_name) free (table_name) if (utable != NULL) free (utable) return (NULL) utable[i](unsigned short) (((j << 8) + k) & 0xffff) else if (is_vv_debug) fprintf (stderr,) free (table_name) return (utable) char mid_defs_char[]0x28, 0x2c, 0x21,,, 0, 0 char midl_defs_char[]0, 0, 0x28, 0,, 0, 0 void skf_charset_parser (parse) int parse struct in_codeset_defs *ocodeset unsigned long rcodeset int ti, ii if (is_vvv_debug) fprintf (stderr,, parse) ocodeset NULL if (parse < codeset_end) out_codeset parse else error_code_option (parse) out_codeset DEFAULT_O if (out_codeset == codeset_jef) out_tablefault (SKF_NOOUT) skferr (SKF_TABLEERR_O, 3, 0) else if ((out_codeset == codeset_transp) || (out_codeset == codeset_var)) out_tablefault (SKF_NOOUT) skferr (SKF_TABLEERR_O, 3, 1) else if (is_nkf_compat) if (is_cp932_ext) if (out_codeset == codeset_sjis) out_codeset codeset_cp932 else if (out_codeset == codeset_eucjp) out_codeset codeset_cp51932 else if (out_codeset == codeset_jis) out_codeset codeset_jisms else else if (is_nocp932_ext) if (out_codeset == codeset_cp932) out_codeset codeset_sjis else if (out_codeset == codeset_cp51932) out_codeset codeset_cp20932 else if (out_codeset == codeset_jisms) out_codeset codeset_jis else else if (out_codeset == codeset_euc_213) out_codeset codeset_euc_213a else if (out_codeset == codeset_x0213) out_codeset codeset_x213a else if (out_codeset == codeset_sj_0213) out_codeset codeset_sj_213a else else ocodeset & (i_codeset[out_codeset]) if (ocodeset != NULL) rcodeset (ocodeset oconv_type) set_ocode_codeset ((ocodeset oconv_type)) skf_output_lang ocodeset oconv_lang if (is_vv_debug) if (is_ucs_ufam (conv_cap)) fprintf (stderr,) else fprintf (stderr,, ocodeset o_iso_ascii_index, ocodeset o_iso_latin_index, ocodeset o_iso_symbol_index, ocodeset o_iso_kana_index) fprintf (stderr,, ocodeset o_iso_cjk_a_index, ocodeset o_iso_kanji_index, ocodeset o_iso_y_index, ocodeset o_iso_hngl_index) fprintf (stderr,, ocodeset o_iso_compat_index, ocodeset o_iso_cjk_b_index, ocodeset o_iso_cjk_c_index, ocodeset o_iso_prv_index) fprintf (stderr,, ocodeset o_iso_his_index, ocodeset o_iso_note_index, ocodeset o_iso_upkana_index, ocodeset o_iso_upmisc_index) ti ocodeset g0def tbl_index ii ocodeset g0def index if (use_g0ascii) ti ub_uni_index ii ascii_index if (ti >= 0) if (k_out != 0) g0_char k_out else g0_char iso_ubytedef_table[ti]ientry[ii]defschar g0_typ iso_ubytedef_table[ti]ientry[ii]is_kana g0_mid mid_defs_char[ti]g0_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g0adef tbl_index ii ocodeset g0adef index if (ti >= 0) if (k_in != 0) ag0_char k_in else if (out_codeset == codeset_jisms) ag0_char else ag0_char iso_ubytedef_table[ti]ientry[ii]defschar ag0_typ iso_ubytedef_table[ti]ientry[ii]is_kana if (is_jis_jis (conv_cap) && is_quad_char) ag0_typ |= COD_MB_4 ag0_mid mid_defs_char[ti]ag0_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g1def tbl_index ii ocodeset g1def index if (ti >= 0) g1_char iso_ubytedef_table[ti]ientry[ii]defschar g1_typ iso_ubytedef_table[ti]ientry[ii]is_kana g1_mid mid_defs_char[ti]g1_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g2def tbl_index ii ocodeset g2def index if (ti >= 0) g2_char iso_ubytedef_table[ti]ientry[ii]defschar g2_typ iso_ubytedef_table[ti]ientry[ii]is_kana g2_mid mid_defs_char[ti]g2_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g3def tbl_index ii ocodeset g3def index if (ti >= 0) g3_char iso_ubytedef_table[ti]ientry[ii]defschar g3_typ iso_ubytedef_table[ti]ientry[ii]is_kana g3_mid mid_defs_char[ti]g3_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset ogldef tbl_index ii ocodeset ogldef index if (ti >= 0) g4_char iso_ubytedef_table[ti]ientry[ii]defschar g4_typ iso_ubytedef_table[ti]ientry[ii]is_kana g4_mid mid_defs_char[ti]g4_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) if (ocodeset hook != NULL) (ocodeset hook) () if (use_g0ascii || (ocodeset o_iso_ascii_index >= 0)) if (use_g0ascii) uni_o_ascii_defs & (o_iso_ascii_defs[OI_ASCI_ASCII]) else uni_o_ascii_defs & (o_iso_ascii_defs[ocodeset o_iso_ascii_index]) if ((uni_o_ascii uni_o_ascii_defs otbl) == NULL) uni_o_ascii_defs otbl skf_otable_loader (uni_o_ascii_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_ascii_defs tbl_len) if ((uni_o_ascii uni_o_ascii_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else if (ocodeset o_iso_latin_index >= 0) uni_o_latin_defs & (o_iso_latin_defs[ocodeset o_iso_latin_index]) if ((uni_o_latin uni_o_latin_defs otbl) == NULL) uni_o_latin_defs otbl skf_otable_loader (uni_o_latin_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_latin_defs tbl_len) if ((uni_o_latin uni_o_latin_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_symbol_index >= 0) uni_o_symbol_defs & (o_iso_symbol_defs[ocodeset o_iso_symbol_index]) if ((uni_o_symbol uni_o_symbol_defs otbl) == NULL) uni_o_symbol_defs otbl skf_otable_loader (uni_o_symbol_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_symbol_defs tbl_len) if ((uni_o_symbol uni_o_symbol_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else uni_o_symbol uni_o_symbol_defs otbl if (ocodeset o_iso_kana_index >= 0) uni_o_kana_defs & (o_iso_kana_defs[ocodeset o_iso_kana_index]) if ((uni_o_kana uni_o_kana_defs otbl) == NULL) uni_o_kana_defs otbl skf_otable_loader (uni_o_kana_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_kana_defs tbl_len) if ((uni_o_kana uni_o_kana_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else uni_o_kana uni_o_kana_defs otbl if (ocodeset o_iso_kanji_index >= 0) uni_o_kanji_defs & (o_iso_kanji_defs[ocodeset o_iso_kanji_index]) if ((uni_o_kanji uni_o_kanji_defs otbl) == NULL) uni_o_kanji_defs otbl skf_otable_loader (uni_o_kanji_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_kanji_defs tbl_len) if ((uni_o_kanji uni_o_kanji_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_a_index >= 0) uni_o_cjk_a_defs & (o_iso_cjk_a_defs[ocodeset o_iso_cjk_a_index]) if ((uni_o_cjk_a uni_o_cjk_a_defs otbl) == NULL) uni_o_cjk_a_defs otbl skf_otable_loader (uni_o_cjk_a_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_a_defs tbl_len) if ((uni_o_cjk_a uni_o_cjk_a_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_b_index >= 0) uni_o_cjk_b_defs & (o_iso_cjk_b_defs[ocodeset o_iso_cjk_b_index]) if ((uni_o_cjk_b uni_o_cjk_b_defs otbl) == NULL) uni_o_cjk_b_defs otbl skf_otable_loader (uni_o_cjk_b_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_b_defs tbl_len) if ((uni_o_cjk_b uni_o_cjk_b_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_c_index >= 0) uni_o_cjk_c_defs & (o_iso_cjk_c_defs[ocodeset o_iso_cjk_c_index]) if ((uni_o_cjk_c uni_o_cjk_c_defs otbl) == NULL) uni_o_cjk_c_defs otbl skf_otable_loader (uni_o_cjk_c_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_c_defs tbl_len) if ((uni_o_cjk_c uni_o_cjk_c_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_hngl_index >= 0) uni_o_hngl_defs & (o_iso_hngl_defs[ocodeset o_iso_hngl_index]) if ((uni_o_hngl uni_o_hngl_defs otbl) == NULL) uni_o_hngl_defs otbl skf_otable_loader (uni_o_hngl_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_hngl_defs tbl_len) if ((uni_o_hngl uni_o_hngl_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_y_index >= 0) uni_o_y_defs & (o_iso_y_defs[ocodeset o_iso_y_index]) if ((uni_o_y uni_o_y_defs otbl) == NULL) uni_o_y_defs otbl skf_otable_loader (uni_o_y_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_y_defs tbl_len) if ((uni_o_y uni_o_y_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_prv_index >= 0) uni_o_prv_defs & (o_iso_prv_defs[ocodeset o_iso_prv_index]) if ((uni_o_prv uni_o_prv_defs otbl) == NULL) uni_o_prv_defs otbl skf_otable_loader (uni_o_prv_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_prv_defs tbl_len) if ((uni_o_prv uni_o_prv_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_compat_index >= 0) uni_o_compat_defs & (o_iso_compat_defs[ocodeset o_iso_compat_index]) if ((uni_o_compat uni_o_compat_defs otbl) == NULL) uni_o_compat_defs otbl skf_otable_loader (uni_o_compat_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_compat_defs tbl_len) if ((uni_o_compat uni_o_compat_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_his_index >= 0) uni_o_hist_defs & (o_iso_hist_defs[ocodeset o_iso_his_index]) if ((uni_o_hist uni_o_hist_defs otbl) == NULL) uni_o_hist_defs otbl skf_otable_loader (uni_o_hist_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_hist_defs tbl_len) if ((uni_o_hist uni_o_hist_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_note_index >= 0) uni_o_note_defs & (o_iso_note_defs[ocodeset o_iso_note_index]) if ((uni_o_note uni_o_note_defs otbl) == NULL) uni_o_note_defs otbl skf_otable_loader (uni_o_note_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_note_defs tbl_len) if ((uni_o_note uni_o_note_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if ( ! use_g0ascii) output_codeset_fix_table (ocodeset o_patch) else output_codeset_fix_table (NULL) int test_out_char (ch) skf_ucode ch if (ch < 0x80) return (1) else if (ch < LATIN_TBL_START) return (0) else if (ch < GLYPH_TBL_START) if ((uni_o_latin == NULL) || (uni_o_latin[ch - LATIN_TBL_START] == 0)) return (0) else return (1) else if (ch < KANA_TBL_START) if ((uni_o_symbol == NULL) || (uni_o_symbol[ch - GLYPH_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_A_TBL_START) if ((uni_o_kana == NULL) || (uni_o_kana[ch - KANA_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_TBL_START) if ((uni_o_cjk_a == NULL) || (uni_o_cjk_a[ch - CJK_A_TBL_START] == 0)) return (0) else return (1) else if (ch < Y_TBL_START) if ((uni_o_kanji == NULL) || (uni_o_kanji[ch - CJK_TBL_START] == 0)) return (0) else return (1) else if (ch < HNGL_TBL_START) if ((uni_o_y == NULL) || (uni_o_y[ch - Y_TBL_START] == 0)) return (0) else return (1) else if (ch <= HNGL_TBL_END) if ((uni_o_hngl == NULL) || (uni_o_hngl[ch - HNGL_TBL_START] == 0)) return (0) else return (1) else if (ch < PRV_TBL_START) return (0) else if (ch < CPT_TBL_START) if ((uni_o_prv == NULL) || (uni_o_prv[ch - PRV_TBL_START] == 0)) return (0) else return (1) else if (ch <= CPT_TBL_END) if ((uni_o_compat == NULL) || (uni_o_compat[ch - CPT_TBL_START] == 0)) return (0) else return (1) else if (ch <= HIST_TBL_END) if ((uni_o_hist == NULL) || (uni_o_hist[ch - 0x10000] == 0)) return (0) else return (1) else if (ch < UPMISC_TBL_START) return (0) else if (ch <= UPMISC_TBL_END) if ((uni_o_upmisc == NULL) || (uni_o_upmisc[ch - UPMISC_TBL_START] == 0)) return (0) else return (1) else if (ch < UPKANA_TBL_START) return (0) else if (ch <= UPKANA_TBL_END) if ((uni_o_note == NULL) || (uni_o_upkana[ch - UPKANA_TBL_START] == 0)) return (0) else return (1) else if (ch < NOTE_TBL_START) return (0) else if (ch < CJK_B_TBL_START) if ((uni_o_note == NULL) || (uni_o_note[ch - NOTE_TBL_START] == 0)) return (0) else return (1) else if (ch <= CJK_B_TBL_END) if ((uni_o_cjk_b == NULL) || (uni_o_cjk_b[ch - CJK_B_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_C_TBL_START) return (0) else if (ch < CJK_C_TBL_END) if ((uni_o_cjk_c == NULL) || (uni_o_cjk_c[ch - CJK_C_TBL_START] == 0)) return (0) else return (1) else return (0) int get_combine_strength (ch) skf_ucode ch if ((ch < 65536) && (ch >= 0)) return ((nkd_strmap[ch] & NKD_STRMAP_STRMASK)) else if ((ch >= 0x10a01) && (ch <= 0x10a3f)) return (uni_f_s_10a[ch - 0x10a01]) else if ((ch >= 0x1d167) && (ch <= 0x1d1ad)) return (uni_f_s_1d1[ch - 0x1d167]) else if ((ch >= 0x1d242) && (ch <= 0x1d244)) return (230) else return (255) struct locale_codeset_name lang_defcode[]L_JA, codeset_utf8, L_EN, codeset_utf8, L_FR, codeset_8859_1, L_KO, codeset_euckr, L_HE, codeset_8859_8, L_RU, codeset_koi8r, 0x0, 0 struct locale_codeset_name loc_defcode[]N_JAJP, codeset_eucjp, N_ENUS, codeset_utf8, N_KOKR, codeset_euckr, N_PTBR, codeset_8859_1, N_RURU, codeset_8859_5, N_RUUA, codeset_utf8, N_THTH, codeset_8859_11, N_VIVN, codeset_utf8, N_ZHCN, codeset_euccn, N_ZHTW, codeset_big5, 0x0, 0 int get_output_locale () int localename -1 char *ob_locale char *dotpos char *atpos char extr_cset[LANGNAME_LIMIT + 1]int i, j int sy int langn, nationn if ((ob_locale nl_langinfo ((nl_item) CODESET)) == NULL) localename skf_search_cname (ob_locale) else if ((localename < 0) && ((ob_locale setlocale (LC_ALL,)) != NULL)) if ((ob_locale setlocale (LC_ALL,)) != NULL) dotpos strchr (ob_locale,) if (dotpos != NULL) dotpos ++ atpos strchr (ob_locale,) if (atpos == NULL) atpos dotpos + 16 for (i 0 (*dotpos !=) && (dotpos < atpos) && (i < LANGNAME_LIMIT) dotpos ++, i ++) extr_cset[i]*dotpos if (i < 16) extr_cset[i]else extr_cset[15]if (atpos != NULL) atpos ++ if (strncmp (atpos, localemod, (size_t) 10) == 0) res_sup_space_conv set_spconv_1 set_o_prefer_ascii set_kanaconv_x0201 else else localename skf_search_cname (extr_cset) else for (i 0 i < LANGNAME_LIMIT i ++) sy *(ob_locale + i) extr_cset[i]SKFtoupper (sy) if ((sy ==) || (sy ==)) break extr_cset[i]if (((i == 1) && (extr_cset[0] ==)) || ((i == 5) && (extr_cset[0] ==) && (extr_cset[1] ==) && (extr_cset[2] ==) && (extr_cset[4] ==) && (extr_cset[5] ==))) return codeset_utf8 else if ((i >= 2) && (((extr_cset[0] ==) && (extr_cset[1] ==)) || ((extr_cset[0] ==) && (extr_cset[1] ==)))) return -1 else if (i > 1) langn ((extr_cset[0] & 0x7f) << 8) + (extr_cset[1] & 0x7f) nationn ((extr_cset[3] & 0x7f) << 8) + (extr_cset[4] & 0x7f) if (i >= 5) nationn ((extr_cset[3] & 0x7f) << 8) + (extr_cset[4] & 0x7f) langn (langn << 16) + nationn for (j 0 loc_defcode[j]langnat != 0 j ++) if (loc_defcode[j]langnat == langn) localename loc_defcode[j]codename break else else if (localename < 0) for (j 0 lang_defcode[j]langnat != 0 j ++) if (lang_defcode[j]langnat == nationn) localename lang_defcode[j]codename break else else else return localename else return -1 return -1 at out_code_table.c:2587>
            SKFtoupper()
            fopen()
            free()
            getc()
            is_tbl_man()
            fclose()
        in_tablefault()
        unicode_normalize_setup() <void unicode_normalize_setup () at in_code_table.c:2885>:
            load_external_table() <int load_external_table (tbl_entry) at in_code_table.c:2650>:
                is_tblundef()
                in_tablefault()
                is_tblshort()
                is_tbllong()
                calloc()
                skferr()
                strlen()
                fprintf()
                snprintf() <if ((snprintf (table_name, (size_t) (SKF_TABLE_PATH -2),, if ((snprintf (table_name, (size_t) (SKF_TABLE_PATH -2),, skf_ext_table, (iso), (((ch >=) && (ch <=)) (set) (set)), SKFtoupper (ch), id)) < 0) skferr (SKF_TBLALLOCERR, (long) ch, 0) if (is_vv_debug) fprintf (stderr,, table_name, siz + siz +12) if ((table fopen (table_name, skf_inmode)) == NULL) in_tablefault (SKF_TBLBROKN, table_name) free (table_name) return (NULL) else i 0 magic skf_table_magic while (*magic !=) if (*magic ++ != getc (table)) if (disp_warn) in_tablefault (SKF_TBLINCNSIS, table_name) fail 1 break if ((utable calloc ((size_t) siz, sizeof (unsigned short))) == NULL) skferr (SKF_TBLALLOCERR, (long) siz, 0) if (fail == 0) for (i 0 i < siz i ++) if (((j getc (table)) == EOF) || ((k getc (table)) == EOF)) in_tablefault (SKF_TBLSHORT, table_name) free (table_name) if (utable != NULL) free (utable) return (NULL) utable[i](unsigned short) (((j << 8) + k) & 0xffff) else if (is_vv_debug) fprintf (stderr,) free (table_name) return (utable) char mid_defs_char[]0x28, 0x2c, 0x21,,, 0, 0 char midl_defs_char[]0, 0, 0x28, 0,, 0, 0 void skf_charset_parser (parse) int parse struct in_codeset_defs *ocodeset unsigned long rcodeset int ti, ii if (is_vvv_debug) fprintf (stderr,, parse) ocodeset NULL if (parse < codeset_end) out_codeset parse else error_code_option (parse) out_codeset DEFAULT_O if (out_codeset == codeset_jef) out_tablefault (SKF_NOOUT) skferr (SKF_TABLEERR_O, 3, 0) else if ((out_codeset == codeset_transp) || (out_codeset == codeset_var)) out_tablefault (SKF_NOOUT) skferr (SKF_TABLEERR_O, 3, 1) else if (is_nkf_compat) if (is_cp932_ext) if (out_codeset == codeset_sjis) out_codeset codeset_cp932 else if (out_codeset == codeset_eucjp) out_codeset codeset_cp51932 else if (out_codeset == codeset_jis) out_codeset codeset_jisms else else if (is_nocp932_ext) if (out_codeset == codeset_cp932) out_codeset codeset_sjis else if (out_codeset == codeset_cp51932) out_codeset codeset_cp20932 else if (out_codeset == codeset_jisms) out_codeset codeset_jis else else if (out_codeset == codeset_euc_213) out_codeset codeset_euc_213a else if (out_codeset == codeset_x0213) out_codeset codeset_x213a else if (out_codeset == codeset_sj_0213) out_codeset codeset_sj_213a else else ocodeset & (i_codeset[out_codeset]) if (ocodeset != NULL) rcodeset (ocodeset oconv_type) set_ocode_codeset ((ocodeset oconv_type)) skf_output_lang ocodeset oconv_lang if (is_vv_debug) if (is_ucs_ufam (conv_cap)) fprintf (stderr,) else fprintf (stderr,, ocodeset o_iso_ascii_index, ocodeset o_iso_latin_index, ocodeset o_iso_symbol_index, ocodeset o_iso_kana_index) fprintf (stderr,, ocodeset o_iso_cjk_a_index, ocodeset o_iso_kanji_index, ocodeset o_iso_y_index, ocodeset o_iso_hngl_index) fprintf (stderr,, ocodeset o_iso_compat_index, ocodeset o_iso_cjk_b_index, ocodeset o_iso_cjk_c_index, ocodeset o_iso_prv_index) fprintf (stderr,, ocodeset o_iso_his_index, ocodeset o_iso_note_index, ocodeset o_iso_upkana_index, ocodeset o_iso_upmisc_index) ti ocodeset g0def tbl_index ii ocodeset g0def index if (use_g0ascii) ti ub_uni_index ii ascii_index if (ti >= 0) if (k_out != 0) g0_char k_out else g0_char iso_ubytedef_table[ti]ientry[ii]defschar g0_typ iso_ubytedef_table[ti]ientry[ii]is_kana g0_mid mid_defs_char[ti]g0_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g0adef tbl_index ii ocodeset g0adef index if (ti >= 0) if (k_in != 0) ag0_char k_in else if (out_codeset == codeset_jisms) ag0_char else ag0_char iso_ubytedef_table[ti]ientry[ii]defschar ag0_typ iso_ubytedef_table[ti]ientry[ii]is_kana if (is_jis_jis (conv_cap) && is_quad_char) ag0_typ |= COD_MB_4 ag0_mid mid_defs_char[ti]ag0_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g1def tbl_index ii ocodeset g1def index if (ti >= 0) g1_char iso_ubytedef_table[ti]ientry[ii]defschar g1_typ iso_ubytedef_table[ti]ientry[ii]is_kana g1_mid mid_defs_char[ti]g1_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g2def tbl_index ii ocodeset g2def index if (ti >= 0) g2_char iso_ubytedef_table[ti]ientry[ii]defschar g2_typ iso_ubytedef_table[ti]ientry[ii]is_kana g2_mid mid_defs_char[ti]g2_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g3def tbl_index ii ocodeset g3def index if (ti >= 0) g3_char iso_ubytedef_table[ti]ientry[ii]defschar g3_typ iso_ubytedef_table[ti]ientry[ii]is_kana g3_mid mid_defs_char[ti]g3_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset ogldef tbl_index ii ocodeset ogldef index if (ti >= 0) g4_char iso_ubytedef_table[ti]ientry[ii]defschar g4_typ iso_ubytedef_table[ti]ientry[ii]is_kana g4_mid mid_defs_char[ti]g4_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) if (ocodeset hook != NULL) (ocodeset hook) () if (use_g0ascii || (ocodeset o_iso_ascii_index >= 0)) if (use_g0ascii) uni_o_ascii_defs & (o_iso_ascii_defs[OI_ASCI_ASCII]) else uni_o_ascii_defs & (o_iso_ascii_defs[ocodeset o_iso_ascii_index]) if ((uni_o_ascii uni_o_ascii_defs otbl) == NULL) uni_o_ascii_defs otbl skf_otable_loader (uni_o_ascii_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_ascii_defs tbl_len) if ((uni_o_ascii uni_o_ascii_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else if (ocodeset o_iso_latin_index >= 0) uni_o_latin_defs & (o_iso_latin_defs[ocodeset o_iso_latin_index]) if ((uni_o_latin uni_o_latin_defs otbl) == NULL) uni_o_latin_defs otbl skf_otable_loader (uni_o_latin_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_latin_defs tbl_len) if ((uni_o_latin uni_o_latin_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_symbol_index >= 0) uni_o_symbol_defs & (o_iso_symbol_defs[ocodeset o_iso_symbol_index]) if ((uni_o_symbol uni_o_symbol_defs otbl) == NULL) uni_o_symbol_defs otbl skf_otable_loader (uni_o_symbol_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_symbol_defs tbl_len) if ((uni_o_symbol uni_o_symbol_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else uni_o_symbol uni_o_symbol_defs otbl if (ocodeset o_iso_kana_index >= 0) uni_o_kana_defs & (o_iso_kana_defs[ocodeset o_iso_kana_index]) if ((uni_o_kana uni_o_kana_defs otbl) == NULL) uni_o_kana_defs otbl skf_otable_loader (uni_o_kana_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_kana_defs tbl_len) if ((uni_o_kana uni_o_kana_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else uni_o_kana uni_o_kana_defs otbl if (ocodeset o_iso_kanji_index >= 0) uni_o_kanji_defs & (o_iso_kanji_defs[ocodeset o_iso_kanji_index]) if ((uni_o_kanji uni_o_kanji_defs otbl) == NULL) uni_o_kanji_defs otbl skf_otable_loader (uni_o_kanji_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_kanji_defs tbl_len) if ((uni_o_kanji uni_o_kanji_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_a_index >= 0) uni_o_cjk_a_defs & (o_iso_cjk_a_defs[ocodeset o_iso_cjk_a_index]) if ((uni_o_cjk_a uni_o_cjk_a_defs otbl) == NULL) uni_o_cjk_a_defs otbl skf_otable_loader (uni_o_cjk_a_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_a_defs tbl_len) if ((uni_o_cjk_a uni_o_cjk_a_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_b_index >= 0) uni_o_cjk_b_defs & (o_iso_cjk_b_defs[ocodeset o_iso_cjk_b_index]) if ((uni_o_cjk_b uni_o_cjk_b_defs otbl) == NULL) uni_o_cjk_b_defs otbl skf_otable_loader (uni_o_cjk_b_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_b_defs tbl_len) if ((uni_o_cjk_b uni_o_cjk_b_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_c_index >= 0) uni_o_cjk_c_defs & (o_iso_cjk_c_defs[ocodeset o_iso_cjk_c_index]) if ((uni_o_cjk_c uni_o_cjk_c_defs otbl) == NULL) uni_o_cjk_c_defs otbl skf_otable_loader (uni_o_cjk_c_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_c_defs tbl_len) if ((uni_o_cjk_c uni_o_cjk_c_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_hngl_index >= 0) uni_o_hngl_defs & (o_iso_hngl_defs[ocodeset o_iso_hngl_index]) if ((uni_o_hngl uni_o_hngl_defs otbl) == NULL) uni_o_hngl_defs otbl skf_otable_loader (uni_o_hngl_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_hngl_defs tbl_len) if ((uni_o_hngl uni_o_hngl_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_y_index >= 0) uni_o_y_defs & (o_iso_y_defs[ocodeset o_iso_y_index]) if ((uni_o_y uni_o_y_defs otbl) == NULL) uni_o_y_defs otbl skf_otable_loader (uni_o_y_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_y_defs tbl_len) if ((uni_o_y uni_o_y_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_prv_index >= 0) uni_o_prv_defs & (o_iso_prv_defs[ocodeset o_iso_prv_index]) if ((uni_o_prv uni_o_prv_defs otbl) == NULL) uni_o_prv_defs otbl skf_otable_loader (uni_o_prv_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_prv_defs tbl_len) if ((uni_o_prv uni_o_prv_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_compat_index >= 0) uni_o_compat_defs & (o_iso_compat_defs[ocodeset o_iso_compat_index]) if ((uni_o_compat uni_o_compat_defs otbl) == NULL) uni_o_compat_defs otbl skf_otable_loader (uni_o_compat_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_compat_defs tbl_len) if ((uni_o_compat uni_o_compat_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_his_index >= 0) uni_o_hist_defs & (o_iso_hist_defs[ocodeset o_iso_his_index]) if ((uni_o_hist uni_o_hist_defs otbl) == NULL) uni_o_hist_defs otbl skf_otable_loader (uni_o_hist_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_hist_defs tbl_len) if ((uni_o_hist uni_o_hist_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_note_index >= 0) uni_o_note_defs & (o_iso_note_defs[ocodeset o_iso_note_index]) if ((uni_o_note uni_o_note_defs otbl) == NULL) uni_o_note_defs otbl skf_otable_loader (uni_o_note_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_note_defs tbl_len) if ((uni_o_note uni_o_note_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if ( ! use_g0ascii) output_codeset_fix_table (ocodeset o_patch) else output_codeset_fix_table (NULL) int test_out_char (ch) skf_ucode ch if (ch < 0x80) return (1) else if (ch < LATIN_TBL_START) return (0) else if (ch < GLYPH_TBL_START) if ((uni_o_latin == NULL) || (uni_o_latin[ch - LATIN_TBL_START] == 0)) return (0) else return (1) else if (ch < KANA_TBL_START) if ((uni_o_symbol == NULL) || (uni_o_symbol[ch - GLYPH_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_A_TBL_START) if ((uni_o_kana == NULL) || (uni_o_kana[ch - KANA_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_TBL_START) if ((uni_o_cjk_a == NULL) || (uni_o_cjk_a[ch - CJK_A_TBL_START] == 0)) return (0) else return (1) else if (ch < Y_TBL_START) if ((uni_o_kanji == NULL) || (uni_o_kanji[ch - CJK_TBL_START] == 0)) return (0) else return (1) else if (ch < HNGL_TBL_START) if ((uni_o_y == NULL) || (uni_o_y[ch - Y_TBL_START] == 0)) return (0) else return (1) else if (ch <= HNGL_TBL_END) if ((uni_o_hngl == NULL) || (uni_o_hngl[ch - HNGL_TBL_START] == 0)) return (0) else return (1) else if (ch < PRV_TBL_START) return (0) else if (ch < CPT_TBL_START) if ((uni_o_prv == NULL) || (uni_o_prv[ch - PRV_TBL_START] == 0)) return (0) else return (1) else if (ch <= CPT_TBL_END) if ((uni_o_compat == NULL) || (uni_o_compat[ch - CPT_TBL_START] == 0)) return (0) else return (1) else if (ch <= HIST_TBL_END) if ((uni_o_hist == NULL) || (uni_o_hist[ch - 0x10000] == 0)) return (0) else return (1) else if (ch < UPMISC_TBL_START) return (0) else if (ch <= UPMISC_TBL_END) if ((uni_o_upmisc == NULL) || (uni_o_upmisc[ch - UPMISC_TBL_START] == 0)) return (0) else return (1) else if (ch < UPKANA_TBL_START) return (0) else if (ch <= UPKANA_TBL_END) if ((uni_o_note == NULL) || (uni_o_upkana[ch - UPKANA_TBL_START] == 0)) return (0) else return (1) else if (ch < NOTE_TBL_START) return (0) else if (ch < CJK_B_TBL_START) if ((uni_o_note == NULL) || (uni_o_note[ch - NOTE_TBL_START] == 0)) return (0) else return (1) else if (ch <= CJK_B_TBL_END) if ((uni_o_cjk_b == NULL) || (uni_o_cjk_b[ch - CJK_B_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_C_TBL_START) return (0) else if (ch < CJK_C_TBL_END) if ((uni_o_cjk_c == NULL) || (uni_o_cjk_c[ch - CJK_C_TBL_START] == 0)) return (0) else return (1) else return (0) int get_combine_strength (ch) skf_ucode ch if ((ch < 65536) && (ch >= 0)) return ((nkd_strmap[ch] & NKD_STRMAP_STRMASK)) else if ((ch >= 0x10a01) && (ch <= 0x10a3f)) return (uni_f_s_10a[ch - 0x10a01]) else if ((ch >= 0x1d167) && (ch <= 0x1d1ad)) return (uni_f_s_1d1[ch - 0x1d167]) else if ((ch >= 0x1d242) && (ch <= 0x1d244)) return (230) else return (255) struct locale_codeset_name lang_defcode[]L_JA, codeset_utf8, L_EN, codeset_utf8, L_FR, codeset_8859_1, L_KO, codeset_euckr, L_HE, codeset_8859_8, L_RU, codeset_koi8r, 0x0, 0 struct locale_codeset_name loc_defcode[]N_JAJP, codeset_eucjp, N_ENUS, codeset_utf8, N_KOKR, codeset_euckr, N_PTBR, codeset_8859_1, N_RURU, codeset_8859_5, N_RUUA, codeset_utf8, N_THTH, codeset_8859_11, N_VIVN, codeset_utf8, N_ZHCN, codeset_euccn, N_ZHTW, codeset_big5, 0x0, 0 int get_output_locale () int localename -1 char *ob_locale char *dotpos char *atpos char extr_cset[LANGNAME_LIMIT + 1]int i, j int sy int langn, nationn if ((ob_locale nl_langinfo ((nl_item) CODESET)) == NULL) localename skf_search_cname (ob_locale) else if ((localename < 0) && ((ob_locale setlocale (LC_ALL,)) != NULL)) if ((ob_locale setlocale (LC_ALL,)) != NULL) dotpos strchr (ob_locale,) if (dotpos != NULL) dotpos ++ atpos strchr (ob_locale,) if (atpos == NULL) atpos dotpos + 16 for (i 0 (*dotpos !=) && (dotpos < atpos) && (i < LANGNAME_LIMIT) dotpos ++, i ++) extr_cset[i]*dotpos if (i < 16) extr_cset[i]else extr_cset[15]if (atpos != NULL) atpos ++ if (strncmp (atpos, localemod, (size_t) 10) == 0) res_sup_space_conv set_spconv_1 set_o_prefer_ascii set_kanaconv_x0201 else else localename skf_search_cname (extr_cset) else for (i 0 i < LANGNAME_LIMIT i ++) sy *(ob_locale + i) extr_cset[i]SKFtoupper (sy) if ((sy ==) || (sy ==)) break extr_cset[i]if (((i == 1) && (extr_cset[0] ==)) || ((i == 5) && (extr_cset[0] ==) && (extr_cset[1] ==) && (extr_cset[2] ==) && (extr_cset[4] ==) && (extr_cset[5] ==))) return codeset_utf8 else if ((i >= 2) && (((extr_cset[0] ==) && (extr_cset[1] ==)) || ((extr_cset[0] ==) && (extr_cset[1] ==)))) return -1 else if (i > 1) langn ((extr_cset[0] & 0x7f) << 8) + (extr_cset[1] & 0x7f) nationn ((extr_cset[3] & 0x7f) << 8) + (extr_cset[4] & 0x7f) if (i >= 5) nationn ((extr_cset[3] & 0x7f) << 8) + (extr_cset[4] & 0x7f) langn (langn << 16) + nationn for (j 0 loc_defcode[j]langnat != 0 j ++) if (loc_defcode[j]langnat == langn) localename loc_defcode[j]codename break else else if (localename < 0) for (j 0 lang_defcode[j]langnat != 0 j ++) if (lang_defcode[j]langnat == nationn) localename lang_defcode[j]codename break else else else return localename else return -1 return -1 at out_code_table.c:2587>
                SKFtoupper()
                fopen()
                free()
                getc()
                is_tbl_man()
                fclose()
            in_tablefault()
    init_all_stats() <void init_all_stats () at in_decoder.c:1926>:
        clear_after_mime() <void clear_after_mime () at in_decoder.c:1933>:
            fprintf()
        post_Qclear()
        pre_Qclear()
    fold_value_setup() <void fold_value_setup () at skf.c:2450>
    skf_setmode() <void skf_setmode (fp, mode, str) at skf_fileio.c:410>:
        setmode()
        fileno()
        skf_openerr()
        skf_exit()
        fflush()
    skf_ioinit()
    fopen()
    skf_openerr()
    skf_exit()
    fprintf()
    strncpy()
    skf_fopen() <FILE *skf_fopen (name, mode) at skf_fileio.c:258>
    snprintf() <if ((snprintf (table_name, (size_t) (SKF_TABLE_PATH -2),, if ((snprintf (table_name, (size_t) (SKF_TABLE_PATH -2),, skf_ext_table, (iso), (((ch >=) && (ch <=)) (set) (set)), SKFtoupper (ch), id)) < 0) skferr (SKF_TBLALLOCERR, (long) ch, 0) if (is_vv_debug) fprintf (stderr,, table_name, siz + siz +12) if ((table fopen (table_name, skf_inmode)) == NULL) in_tablefault (SKF_TBLBROKN, table_name) free (table_name) return (NULL) else i 0 magic skf_table_magic while (*magic !=) if (*magic ++ != getc (table)) if (disp_warn) in_tablefault (SKF_TBLINCNSIS, table_name) fail 1 break if ((utable calloc ((size_t) siz, sizeof (unsigned short))) == NULL) skferr (SKF_TBLALLOCERR, (long) siz, 0) if (fail == 0) for (i 0 i < siz i ++) if (((j getc (table)) == EOF) || ((k getc (table)) == EOF)) in_tablefault (SKF_TBLSHORT, table_name) free (table_name) if (utable != NULL) free (utable) return (NULL) utable[i](unsigned short) (((j << 8) + k) & 0xffff) else if (is_vv_debug) fprintf (stderr,) free (table_name) return (utable) char mid_defs_char[]0x28, 0x2c, 0x21,,, 0, 0 char midl_defs_char[]0, 0, 0x28, 0,, 0, 0 void skf_charset_parser (parse) int parse struct in_codeset_defs *ocodeset unsigned long rcodeset int ti, ii if (is_vvv_debug) fprintf (stderr,, parse) ocodeset NULL if (parse < codeset_end) out_codeset parse else error_code_option (parse) out_codeset DEFAULT_O if (out_codeset == codeset_jef) out_tablefault (SKF_NOOUT) skferr (SKF_TABLEERR_O, 3, 0) else if ((out_codeset == codeset_transp) || (out_codeset == codeset_var)) out_tablefault (SKF_NOOUT) skferr (SKF_TABLEERR_O, 3, 1) else if (is_nkf_compat) if (is_cp932_ext) if (out_codeset == codeset_sjis) out_codeset codeset_cp932 else if (out_codeset == codeset_eucjp) out_codeset codeset_cp51932 else if (out_codeset == codeset_jis) out_codeset codeset_jisms else else if (is_nocp932_ext) if (out_codeset == codeset_cp932) out_codeset codeset_sjis else if (out_codeset == codeset_cp51932) out_codeset codeset_cp20932 else if (out_codeset == codeset_jisms) out_codeset codeset_jis else else if (out_codeset == codeset_euc_213) out_codeset codeset_euc_213a else if (out_codeset == codeset_x0213) out_codeset codeset_x213a else if (out_codeset == codeset_sj_0213) out_codeset codeset_sj_213a else else ocodeset & (i_codeset[out_codeset]) if (ocodeset != NULL) rcodeset (ocodeset oconv_type) set_ocode_codeset ((ocodeset oconv_type)) skf_output_lang ocodeset oconv_lang if (is_vv_debug) if (is_ucs_ufam (conv_cap)) fprintf (stderr,) else fprintf (stderr,, ocodeset o_iso_ascii_index, ocodeset o_iso_latin_index, ocodeset o_iso_symbol_index, ocodeset o_iso_kana_index) fprintf (stderr,, ocodeset o_iso_cjk_a_index, ocodeset o_iso_kanji_index, ocodeset o_iso_y_index, ocodeset o_iso_hngl_index) fprintf (stderr,, ocodeset o_iso_compat_index, ocodeset o_iso_cjk_b_index, ocodeset o_iso_cjk_c_index, ocodeset o_iso_prv_index) fprintf (stderr,, ocodeset o_iso_his_index, ocodeset o_iso_note_index, ocodeset o_iso_upkana_index, ocodeset o_iso_upmisc_index) ti ocodeset g0def tbl_index ii ocodeset g0def index if (use_g0ascii) ti ub_uni_index ii ascii_index if (ti >= 0) if (k_out != 0) g0_char k_out else g0_char iso_ubytedef_table[ti]ientry[ii]defschar g0_typ iso_ubytedef_table[ti]ientry[ii]is_kana g0_mid mid_defs_char[ti]g0_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g0adef tbl_index ii ocodeset g0adef index if (ti >= 0) if (k_in != 0) ag0_char k_in else if (out_codeset == codeset_jisms) ag0_char else ag0_char iso_ubytedef_table[ti]ientry[ii]defschar ag0_typ iso_ubytedef_table[ti]ientry[ii]is_kana if (is_jis_jis (conv_cap) && is_quad_char) ag0_typ |= COD_MB_4 ag0_mid mid_defs_char[ti]ag0_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g1def tbl_index ii ocodeset g1def index if (ti >= 0) g1_char iso_ubytedef_table[ti]ientry[ii]defschar g1_typ iso_ubytedef_table[ti]ientry[ii]is_kana g1_mid mid_defs_char[ti]g1_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g2def tbl_index ii ocodeset g2def index if (ti >= 0) g2_char iso_ubytedef_table[ti]ientry[ii]defschar g2_typ iso_ubytedef_table[ti]ientry[ii]is_kana g2_mid mid_defs_char[ti]g2_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset g3def tbl_index ii ocodeset g3def index if (ti >= 0) g3_char iso_ubytedef_table[ti]ientry[ii]defschar g3_typ iso_ubytedef_table[ti]ientry[ii]is_kana g3_mid mid_defs_char[ti]g3_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) ti ocodeset ogldef tbl_index ii ocodeset ogldef index if (ti >= 0) g4_char iso_ubytedef_table[ti]ientry[ii]defschar g4_typ iso_ubytedef_table[ti]ientry[ii]is_kana g4_mid mid_defs_char[ti]g4_midl midl_defs_char[ti]if ((is_v_debug) && ! is_ucs_ufam (conv_cap)) fprintf (stderr,, ((ti < 0) iso_ubytedef_table[ti]ientry[ii]desc)) if (ocodeset hook != NULL) (ocodeset hook) () if (use_g0ascii || (ocodeset o_iso_ascii_index >= 0)) if (use_g0ascii) uni_o_ascii_defs & (o_iso_ascii_defs[OI_ASCI_ASCII]) else uni_o_ascii_defs & (o_iso_ascii_defs[ocodeset o_iso_ascii_index]) if ((uni_o_ascii uni_o_ascii_defs otbl) == NULL) uni_o_ascii_defs otbl skf_otable_loader (uni_o_ascii_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_ascii_defs tbl_len) if ((uni_o_ascii uni_o_ascii_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else if (ocodeset o_iso_latin_index >= 0) uni_o_latin_defs & (o_iso_latin_defs[ocodeset o_iso_latin_index]) if ((uni_o_latin uni_o_latin_defs otbl) == NULL) uni_o_latin_defs otbl skf_otable_loader (uni_o_latin_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_latin_defs tbl_len) if ((uni_o_latin uni_o_latin_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_symbol_index >= 0) uni_o_symbol_defs & (o_iso_symbol_defs[ocodeset o_iso_symbol_index]) if ((uni_o_symbol uni_o_symbol_defs otbl) == NULL) uni_o_symbol_defs otbl skf_otable_loader (uni_o_symbol_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_symbol_defs tbl_len) if ((uni_o_symbol uni_o_symbol_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else uni_o_symbol uni_o_symbol_defs otbl if (ocodeset o_iso_kana_index >= 0) uni_o_kana_defs & (o_iso_kana_defs[ocodeset o_iso_kana_index]) if ((uni_o_kana uni_o_kana_defs otbl) == NULL) uni_o_kana_defs otbl skf_otable_loader (uni_o_kana_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_kana_defs tbl_len) if ((uni_o_kana uni_o_kana_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) else uni_o_kana uni_o_kana_defs otbl if (ocodeset o_iso_kanji_index >= 0) uni_o_kanji_defs & (o_iso_kanji_defs[ocodeset o_iso_kanji_index]) if ((uni_o_kanji uni_o_kanji_defs otbl) == NULL) uni_o_kanji_defs otbl skf_otable_loader (uni_o_kanji_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_kanji_defs tbl_len) if ((uni_o_kanji uni_o_kanji_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_a_index >= 0) uni_o_cjk_a_defs & (o_iso_cjk_a_defs[ocodeset o_iso_cjk_a_index]) if ((uni_o_cjk_a uni_o_cjk_a_defs otbl) == NULL) uni_o_cjk_a_defs otbl skf_otable_loader (uni_o_cjk_a_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_a_defs tbl_len) if ((uni_o_cjk_a uni_o_cjk_a_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_b_index >= 0) uni_o_cjk_b_defs & (o_iso_cjk_b_defs[ocodeset o_iso_cjk_b_index]) if ((uni_o_cjk_b uni_o_cjk_b_defs otbl) == NULL) uni_o_cjk_b_defs otbl skf_otable_loader (uni_o_cjk_b_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_b_defs tbl_len) if ((uni_o_cjk_b uni_o_cjk_b_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_cjk_c_index >= 0) uni_o_cjk_c_defs & (o_iso_cjk_c_defs[ocodeset o_iso_cjk_c_index]) if ((uni_o_cjk_c uni_o_cjk_c_defs otbl) == NULL) uni_o_cjk_c_defs otbl skf_otable_loader (uni_o_cjk_c_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_cjk_c_defs tbl_len) if ((uni_o_cjk_c uni_o_cjk_c_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_hngl_index >= 0) uni_o_hngl_defs & (o_iso_hngl_defs[ocodeset o_iso_hngl_index]) if ((uni_o_hngl uni_o_hngl_defs otbl) == NULL) uni_o_hngl_defs otbl skf_otable_loader (uni_o_hngl_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_hngl_defs tbl_len) if ((uni_o_hngl uni_o_hngl_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_y_index >= 0) uni_o_y_defs & (o_iso_y_defs[ocodeset o_iso_y_index]) if ((uni_o_y uni_o_y_defs otbl) == NULL) uni_o_y_defs otbl skf_otable_loader (uni_o_y_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_y_defs tbl_len) if ((uni_o_y uni_o_y_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_prv_index >= 0) uni_o_prv_defs & (o_iso_prv_defs[ocodeset o_iso_prv_index]) if ((uni_o_prv uni_o_prv_defs otbl) == NULL) uni_o_prv_defs otbl skf_otable_loader (uni_o_prv_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_prv_defs tbl_len) if ((uni_o_prv uni_o_prv_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_compat_index >= 0) uni_o_compat_defs & (o_iso_compat_defs[ocodeset o_iso_compat_index]) if ((uni_o_compat uni_o_compat_defs otbl) == NULL) uni_o_compat_defs otbl skf_otable_loader (uni_o_compat_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_compat_defs tbl_len) if ((uni_o_compat uni_o_compat_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_his_index >= 0) uni_o_hist_defs & (o_iso_hist_defs[ocodeset o_iso_his_index]) if ((uni_o_hist uni_o_hist_defs otbl) == NULL) uni_o_hist_defs otbl skf_otable_loader (uni_o_hist_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_hist_defs tbl_len) if ((uni_o_hist uni_o_hist_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if (ocodeset o_iso_note_index >= 0) uni_o_note_defs & (o_iso_note_defs[ocodeset o_iso_note_index]) if ((uni_o_note uni_o_note_defs otbl) == NULL) uni_o_note_defs otbl skf_otable_loader (uni_o_note_defs defschar,, is_cod_iso (rcodeset), is_cod_mb (rcodeset), uni_o_note_defs tbl_len) if ((uni_o_note uni_o_note_defs otbl) == NULL) in_tablefault (SKF_OTBLINCNSIS,) if ( ! use_g0ascii) output_codeset_fix_table (ocodeset o_patch) else output_codeset_fix_table (NULL) int test_out_char (ch) skf_ucode ch if (ch < 0x80) return (1) else if (ch < LATIN_TBL_START) return (0) else if (ch < GLYPH_TBL_START) if ((uni_o_latin == NULL) || (uni_o_latin[ch - LATIN_TBL_START] == 0)) return (0) else return (1) else if (ch < KANA_TBL_START) if ((uni_o_symbol == NULL) || (uni_o_symbol[ch - GLYPH_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_A_TBL_START) if ((uni_o_kana == NULL) || (uni_o_kana[ch - KANA_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_TBL_START) if ((uni_o_cjk_a == NULL) || (uni_o_cjk_a[ch - CJK_A_TBL_START] == 0)) return (0) else return (1) else if (ch < Y_TBL_START) if ((uni_o_kanji == NULL) || (uni_o_kanji[ch - CJK_TBL_START] == 0)) return (0) else return (1) else if (ch < HNGL_TBL_START) if ((uni_o_y == NULL) || (uni_o_y[ch - Y_TBL_START] == 0)) return (0) else return (1) else if (ch <= HNGL_TBL_END) if ((uni_o_hngl == NULL) || (uni_o_hngl[ch - HNGL_TBL_START] == 0)) return (0) else return (1) else if (ch < PRV_TBL_START) return (0) else if (ch < CPT_TBL_START) if ((uni_o_prv == NULL) || (uni_o_prv[ch - PRV_TBL_START] == 0)) return (0) else return (1) else if (ch <= CPT_TBL_END) if ((uni_o_compat == NULL) || (uni_o_compat[ch - CPT_TBL_START] == 0)) return (0) else return (1) else if (ch <= HIST_TBL_END) if ((uni_o_hist == NULL) || (uni_o_hist[ch - 0x10000] == 0)) return (0) else return (1) else if (ch < UPMISC_TBL_START) return (0) else if (ch <= UPMISC_TBL_END) if ((uni_o_upmisc == NULL) || (uni_o_upmisc[ch - UPMISC_TBL_START] == 0)) return (0) else return (1) else if (ch < UPKANA_TBL_START) return (0) else if (ch <= UPKANA_TBL_END) if ((uni_o_note == NULL) || (uni_o_upkana[ch - UPKANA_TBL_START] == 0)) return (0) else return (1) else if (ch < NOTE_TBL_START) return (0) else if (ch < CJK_B_TBL_START) if ((uni_o_note == NULL) || (uni_o_note[ch - NOTE_TBL_START] == 0)) return (0) else return (1) else if (ch <= CJK_B_TBL_END) if ((uni_o_cjk_b == NULL) || (uni_o_cjk_b[ch - CJK_B_TBL_START] == 0)) return (0) else return (1) else if (ch < CJK_C_TBL_START) return (0) else if (ch < CJK_C_TBL_END) if ((uni_o_cjk_c == NULL) || (uni_o_cjk_c[ch - CJK_C_TBL_START] == 0)) return (0) else return (1) else return (0) int get_combine_strength (ch) skf_ucode ch if ((ch < 65536) && (ch >= 0)) return ((nkd_strmap[ch] & NKD_STRMAP_STRMASK)) else if ((ch >= 0x10a01) && (ch <= 0x10a3f)) return (uni_f_s_10a[ch - 0x10a01]) else if ((ch >= 0x1d167) && (ch <= 0x1d1ad)) return (uni_f_s_1d1[ch - 0x1d167]) else if ((ch >= 0x1d242) && (ch <= 0x1d244)) return (230) else return (255) struct locale_codeset_name lang_defcode[]L_JA, codeset_utf8, L_EN, codeset_utf8, L_FR, codeset_8859_1, L_KO, codeset_euckr, L_HE, codeset_8859_8, L_RU, codeset_koi8r, 0x0, 0 struct locale_codeset_name loc_defcode[]N_JAJP, codeset_eucjp, N_ENUS, codeset_utf8, N_KOKR, codeset_euckr, N_PTBR, codeset_8859_1, N_RURU, codeset_8859_5, N_RUUA, codeset_utf8, N_THTH, codeset_8859_11, N_VIVN, codeset_utf8, N_ZHCN, codeset_euccn, N_ZHTW, codeset_big5, 0x0, 0 int get_output_locale () int localename -1 char *ob_locale char *dotpos char *atpos char extr_cset[LANGNAME_LIMIT + 1]int i, j int sy int langn, nationn if ((ob_locale nl_langinfo ((nl_item) CODESET)) == NULL) localename skf_search_cname (ob_locale) else if ((localename < 0) && ((ob_locale setlocale (LC_ALL,)) != NULL)) if ((ob_locale setlocale (LC_ALL,)) != NULL) dotpos strchr (ob_locale,) if (dotpos != NULL) dotpos ++ atpos strchr (ob_locale,) if (atpos == NULL) atpos dotpos + 16 for (i 0 (*dotpos !=) && (dotpos < atpos) && (i < LANGNAME_LIMIT) dotpos ++, i ++) extr_cset[i]*dotpos if (i < 16) extr_cset[i]else extr_cset[15]if (atpos != NULL) atpos ++ if (strncmp (atpos, localemod, (size_t) 10) == 0) res_sup_space_conv set_spconv_1 set_o_prefer_ascii set_kanaconv_x0201 else else localename skf_search_cname (extr_cset) else for (i 0 i < LANGNAME_LIMIT i ++) sy *(ob_locale + i) extr_cset[i]SKFtoupper (sy) if ((sy ==) || (sy ==)) break extr_cset[i]if (((i == 1) && (extr_cset[0] ==)) || ((i == 5) && (extr_cset[0] ==) && (extr_cset[1] ==) && (extr_cset[2] ==) && (extr_cset[4] ==) && (extr_cset[5] ==))) return codeset_utf8 else if ((i >= 2) && (((extr_cset[0] ==) && (extr_cset[1] ==)) || ((extr_cset[0] ==) && (extr_cset[1] ==)))) return -1 else if (i > 1) langn ((extr_cset[0] & 0x7f) << 8) + (extr_cset[1] & 0x7f) nationn ((extr_cset[3] & 0x7f) << 8) + (extr_cset[4] & 0x7f) if (i >= 5) nationn ((extr_cset[3] & 0x7f) << 8) + (extr_cset[4] & 0x7f) langn (langn << 16) + nationn for (j 0 loc_defcode[j]langnat != 0 j ++) if (loc_defcode[j]langnat == langn) localename loc_defcode[j]codename break else else if (localename < 0) for (j 0 lang_defcode[j]langnat != 0 j ++) if (lang_defcode[j]langnat == nationn) localename lang_defcode[j]codename break else else else return localename else return -1 return -1 at out_code_table.c:2587>
    umask()
    skf_mkstemp() <int skf_mkstemp (nam) at skf_fileio.c:328>:
        mkstemp()
        time()
        srand()
        strlen()
        rand()
        fprintf()
        open()
        skf_openerr()
    fdopen()
    skf_in_converter() <int skf_in_converter (fin) at skf.c:1423>:
        skf_get_langcode()
        preConvert()
        fprintf()
    skf_fclose()
    skf_gangfinish()
    SKFfflush()
    fclose()
    stat()
    chmod()
    utime()
    unlink()
    rename()
    free()
    fileno()
    skf_setvbuf() <void skf_setvbuf (fp, buf, size) at skf_fileio.c:380>:
        fprintf()
        setvbuf()
        skferr()
        setbuffer()
